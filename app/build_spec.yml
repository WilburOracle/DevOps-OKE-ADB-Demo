version: 0.1
component: build
timeoutInSeconds: 3600
shell: bash
failImmediatelyOnError: true
env:
  variables:
    # 数据库连接信息将从环境变量读取
    DB_USER: "${DB_USER}"
    DB_PASSWORD: "${DB_PASSWORD}"
    DB_DSN: "${DB_DSN}"
    
steps:
  - type: Command
    name: "Connect to OCI Autonomous Database and execute SQL script"
    shell: bash
    timeoutInSeconds: 600
    failImmediatelyOnError: true
    command: |
      # 安装Oracle Instant Client (如果需要)
      echo "正在安装Oracle Instant Client..."
      yum install -y oracle-instantclient-release-el7
      yum install -y oracle-instantclient-basic oracle-instantclient-sqlplus
      
      # 配置环境变量
      export ORACLE_HOME=/usr/lib/oracle/19.15/client64
      export PATH=$ORACLE_HOME/bin:$PATH
      export LD_LIBRARY_PATH=$ORACLE_HOME/lib:$LD_LIBRARY_PATH
      
      # 验证sqlplus是否安装成功
      which sqlplus || { echo "sqlplus未安装成功"; exit 1; }
      
      # 连接数据库并执行SQL脚本
      echo "正在连接数据库并执行SQL脚本..."
      echo "@app/sql/current_version_sql.sql" | sqlplus -s ${DB_USER}/${DB_PASSWORD}@${DB_DSN}
      
      if [ $? -eq 0 ]; then
        echo "SQL脚本执行成功"
      else
        echo "SQL脚本执行失败"
        exit 1
      fi
      
  - type: Command
    name: "Build Docker image"
    shell: bash
    timeoutInSeconds: 900
    failImmediatelyOnError: true
    command: |
      # 切换到app目录
      cd app
      
      # 构建Docker镜像
      echo "正在构建Docker镜像..."
      docker build -t app-demo-image .
      
      if [ $? -eq 0 ]; then
        echo "Docker镜像构建成功"
      else
        echo "Docker镜像构建失败"
        exit 1
      fi
      
      # 创建app-demo.yml文件
      echo "创建app-demo.yml文件..."
      cat > app-demo.yml << 'EOF'
# App Demo Manifest
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-demo
  labels:
    app: app-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app-demo
  template:
    metadata:
      labels:
        app: app-demo
    spec:
      containers:
      - name: app-demo
        image: app-demo-image
        ports:
        - containerPort: 8000
        env:
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: db_user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: db_password
        - name: DB_DSN
          valueFrom:
            secretKeyRef:
              name: db-secrets
              key: db_dsn
EOF
      
      # 创建app-demo-run-sql.sh文件
      echo "创建app-demo-run-sql.sh文件..."
      cat > app-demo-run-sql.sh << 'EOF'
#!/bin/bash
# 运行SQL脚本的Shell脚本

# 检查参数
if [ -z "$1" ]; then
  echo "请提供SQL脚本路径"
  exit 1
fi

SQL_SCRIPT=$1

# 连接数据库并执行SQL脚本
if [ -z "$DB_USER" ] || [ -z "$DB_PASSWORD" ] || [ -z "$DB_DSN" ]; then
  echo "请设置数据库连接环境变量：DB_USER, DB_PASSWORD, DB_DSN"
  exit 1
fi

echo "正在连接数据库并执行SQL脚本：$SQL_SCRIPT"
echo "@$SQL_SCRIPT" | sqlplus -s ${DB_USER}/${DB_PASSWORD}@${DB_DSN}

if [ $? -eq 0 ]; then
  echo "SQL脚本执行成功"
  exit 0
else
  echo "SQL脚本执行失败"
  exit 1
fi
EOF
      
      # 设置脚本为可执行
      chmod +x app-demo-run-sql.sh
      
      # 验证文件创建成功
      ls -la app-demo.yml app-demo-run-sql.sh
      
      # 切换回根目录
      cd ..
      
outputArtifacts:
  - name: "app-demo-image"
    type: "DOCKER_IMAGE"
    location: "app-demo-image"
  - name: "app-domo-manifest"
    type: "BINARY"
    location: "app/app-demo.yml"
  - name: "app-demo-run-sql"
    type: "BINARY"
    location: "app/app-demo-run-sql.sh"